from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import json
import os

from fpdf import FPDF  # PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è

API_TOKEN = os.getenv("API_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ê—Ä–∫–∞–Ω–æ–≤
with open('data/arcanes.json', 'r', encoding='utf-8') as f:
    ARCANES = json.load(f)

def calculate_arcanes(date_str):
    digits = [int(d) for d in date_str if d.isdigit()]
    s1 = sum(digits)
    ar1 = s1 % 22 or 22
    ar2 = sum([int(d) for d in str(s1)]) % 22 or 22
    ar3 = (ar1 + ar2) % 22 or 22
    return [ar1, ar2, ar3]

def generate_pdf(name, birth_date, arcanes):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    pdf.cell(200, 10, txt="–ú–∞—Ç—Ä–∏—Ü–∞ –°—É–¥—å–±—ã", ln=True, align='C')
    pdf.cell(200, 10, txt=f"–ò–º—è: {name}", ln=True, align='L')
    pdf.cell(200, 10, txt=f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}", ln=True, align='L')
    pdf.ln(10)

    for arc in arcanes:
        name = ARCANES[str(arc)]['name']
        desc = ARCANES[str(arc)]['description']
        pdf.multi_cell(0, 10, txt=f"–ê—Ä–∫–∞–Ω {arc}: {name}\n{desc}\n")
        pdf.ln(2)

    path = f"output_{birth_date.replace('.', '-')}.pdf"
    pdf.output(path)
    return path

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ú–∞—Ç—Ä–∏—Ü—É'))
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ –°—É–¥—å–±—ã. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=kb)

@dp.message_handler(lambda msg: msg.text == 'üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ú–∞—Ç—Ä–∏—Ü—É')
async def ask_date(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.07.1991):")

@dp.message_handler()
async def handle_date(message: types.Message):
    try:
        date_obj = datetime.strptime(message.text, '%d.%m.%Y')
        arcs = calculate_arcanes(message.text)
        text = "\n".join([f"–ê—Ä–∫–∞–Ω {arc}: {ARCANES[str(arc)]['name']} ‚Äî {ARCANES[str(arc)]['description']}" for arc in arcs])
        await message.answer(f"‚ú® –¢–≤–æ—è –ú–∞—Ç—Ä–∏—Ü–∞ –°—É–¥—å–±—ã:\n{text}")

        # PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        pdf_path = generate_pdf(message.from_user.full_name, message.text, arcs)
        with open(pdf_path, 'rb') as doc:
            await message.answer_document(doc)
        os.remove(pdf_path)

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
